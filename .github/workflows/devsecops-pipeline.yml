name: DevSecOps Pipeline

on:
  push:
    branches:
      - '**'

jobs:
  devsecops:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r dev-requirements.txt

    - name: Lint with pylint
      run: |
        pylint src/app/

    - name: Run unit tests
      run: |
        PYTHONPATH=src python -m unittest discover -s tests -p "test_*.py"

    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v5
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Configure Docker for Artifact Registry
      run: |
        gcloud auth configure-docker europe-west3-docker.pkg.dev

    - name: Build Docker image
      run: |
        docker build -t europe-west3-docker.pkg.dev/crack-willow-460419-n9/hello-app/devsecops-app:latest .

    - name: Install Trivy
      run: |
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

    - name: Scan Docker image with Trivy
      run: |
        trivy image --exit-code 1 --severity CRITICAL,HIGH \
        --ignore-unfixed \
        europe-west3-docker.pkg.dev/crack-willow-460419-n9/hello-app/devsecops-app:latest

    - name: Push Docker image
      run: |
        docker push europe-west3-docker.pkg.dev/crack-willow-460419-n9/hello-app/devsecops-app:latest

    - name: Get GKE credentials
      uses: google-github-actions/get-gke-credentials@v1
      with:
        cluster_name: ${{ secrets.GKE_CLUSTER }}
        location: ${{ secrets.GKE_ZONE }}
        project_id: ${{ secrets.GCP_PROJECT }}

    - name: Deploy to GKE
      run: |
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
